#include "aes256.h"



STATIC CONST u8 aes_sbox[] =
{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

STATIC CONST u8 aes_inv_sbox[] =
{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
	0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
	0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
	0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
	0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
	0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
	0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
	0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
	0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
	0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
	0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
	0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
	0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
	0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
	0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
	0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
	0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
};

STATIC INLINE unsigned rol32(unsigned x, unsigned y)
{
	return x << y | x >> (32 - y);
}

STATIC INLINE unsigned ror32(unsigned x, unsigned y)
{
	return rol32(x, 32 - y);
}

STATIC u32 mul_by_x(u32 w)
{
	u32 x = w & 0x7f7f7f7f;
	u32 y = w & 0x80808080;

	return (x << 1) ^ (y >> 7) * 0x1b;
}

STATIC u32 mul_by_x2(u32 w)
{
	u32 x = w & 0x3f3f3f3f;
	u32 y = w & 0x80808080;
	u32 z = w & 0x40404040;

	return (x << 2) ^ (y >> 7) * 0x36 ^ (z >> 6) * 0x1b;
}

STATIC u32 mix_columns(u32 x)
{
	u32 y = mul_by_x(x) ^ ror32(x, 16);
	return y ^ ror32(x ^ y, 8);
}

STATIC u32 inv_mix_columns(u32 x)
{
	u32 y = mul_by_x2(x);
	return mix_columns(x ^ y ^ ror32(y, 16));
}

STATIC INLINE u32 subshift(u32 in[], int pos)
{
	return (aes_sbox[in[pos] & 0xff]) ^
		(aes_sbox[(in[(pos + 1) % 4] >> 8) & 0xff] << 8) ^
		(aes_sbox[(in[(pos + 2) % 4] >> 16) & 0xff] << 16) ^
		(aes_sbox[(in[(pos + 3) % 4] >> 24) & 0xff] << 24);
}

STATIC INLINE u32 inv_subshift(u32 in[], int pos)
{
	return (aes_inv_sbox[in[pos] & 0xff]) ^
		(aes_inv_sbox[(in[(pos + 3) % 4] >> 8) & 0xff] << 8) ^
		(aes_inv_sbox[(in[(pos + 2) % 4] >> 16) & 0xff] << 16) ^
		(aes_inv_sbox[(in[(pos + 1) % 4] >> 24) & 0xff] << 24);
}

STATIC INLINE u32 subw(u32 in)
{
	return (aes_sbox[in & 0xff]) ^
		(aes_sbox[(in >> 8) & 0xff] << 8) ^
		(aes_sbox[(in >> 16) & 0xff] << 16) ^
		(aes_sbox[(in >> 24) & 0xff] << 24);
}

/*LITTLE ENDIAN*/
STATIC INLINE u32 get_u32(CONST VOID* p)
{
	CONST u8* bytes = (CONST u8*)p;
	return  (u32)bytes[0] |
		((u32)bytes[1] << 8) |
		((u32)bytes[2] << 16) |
		((u32)bytes[3] << 24);
}

STATIC INLINE VOID put_u32(VOID* p, u32 val)
{
	u8* bytes = (u8*)p;
	bytes[0] = val & 0xFF;
	bytes[1] = (val >> 8) & 0xFF;
	bytes[2] = (val >> 16) & 0xFF;
	bytes[3] = (val >> 24) & 0xFF;
}

VOID aes_expandkey(crypto_aes_ctx* ctx, CONST u8* in_key)
{
	u32 rc, i, j;

	for (i = 0; i < KEY_WORDS; i++)
		ctx->key_enc[i] = get_u32(in_key + i * sizeof(u32));

	for (i = 0, rc = 1; i < 7; ++i, rc = mul_by_x(rc))
	{
		u32* rki = ctx->key_enc + (i * KEY_WORDS);
		u32* rko = rki + KEY_WORDS;

		rko[0] = ror32(subw(rki[KEY_WORDS - 1]), 8) ^ rc ^ rki[0];
		rko[1] = rko[0] ^ rki[1];
		rko[2] = rko[1] ^ rki[2];
		rko[3] = rko[2] ^ rki[3];

		if (i == 6)
			break;
		rko[4] = subw(rko[3]) ^ rki[4];
		rko[5] = rko[4] ^ rki[5];
		rko[6] = rko[5] ^ rki[6];
		rko[7] = rko[6] ^ rki[7];
	}

	ctx->key_dec[0] = ctx->key_enc[56];
	ctx->key_dec[1] = ctx->key_enc[57];
	ctx->key_dec[2] = ctx->key_enc[58];
	ctx->key_dec[3] = ctx->key_enc[59];

	for (i = 4, j = 52; j > 0; i += 4, j -= 4)
	{
		ctx->key_dec[i] = inv_mix_columns(ctx->key_enc[j]);
		ctx->key_dec[i + 1] = inv_mix_columns(ctx->key_enc[j + 1]);
		ctx->key_dec[i + 2] = inv_mix_columns(ctx->key_enc[j + 2]);
		ctx->key_dec[i + 3] = inv_mix_columns(ctx->key_enc[j + 3]);
	}

	ctx->key_dec[i] = ctx->key_enc[0];
	ctx->key_dec[i + 1] = ctx->key_enc[1];
	ctx->key_dec[i + 2] = ctx->key_enc[2];
	ctx->key_dec[i + 3] = ctx->key_enc[3];
}

STATIC INLINE VOID memzero_explicit(crypto_aes_ctx* ctx, size_t size)
{
	volatile char* ptr = (volatile char*)ctx;
	while (size--) *ptr++ = 0;
}

VOID aes_encrypt(crypto_aes_ctx* ctx, u8* out, CONST u8* in)
{
	u32* rkp = ctx->key_enc + 4;
	u32 st0[4], st1[4];
	int round;

	st0[0] = ctx->key_enc[0] ^ get_u32(in + 0);
	st0[1] = ctx->key_enc[1] ^ get_u32(in + 4);
	st0[2] = ctx->key_enc[2] ^ get_u32(in + 8);
	st0[3] = ctx->key_enc[3] ^ get_u32(in + 12);

	for (round = 0;; round += 2, rkp += 8)
	{
		st1[0] = mix_columns(subshift(st0, 0)) ^ rkp[0];
		st1[1] = mix_columns(subshift(st0, 1)) ^ rkp[1];
		st1[2] = mix_columns(subshift(st0, 2)) ^ rkp[2];
		st1[3] = mix_columns(subshift(st0, 3)) ^ rkp[3];

		if (round == ROUNDS_256 - 2)
			break;

		st0[0] = mix_columns(subshift(st1, 0)) ^ rkp[4];
		st0[1] = mix_columns(subshift(st1, 1)) ^ rkp[5];
		st0[2] = mix_columns(subshift(st1, 2)) ^ rkp[6];
		st0[3] = mix_columns(subshift(st1, 3)) ^ rkp[7];
	}

	put_u32(out + 0, subshift(st1, 0) ^ rkp[4]);
	put_u32(out + 4, subshift(st1, 1) ^ rkp[5]);
	put_u32(out + 8, subshift(st1, 2) ^ rkp[6]);
	put_u32(out + 12, subshift(st1, 3) ^ rkp[7]);
}

VOID aes_decrypt(crypto_aes_ctx* ctx, u8* out, CONST u8* in)
{
	CONST u32* rkp = ctx->key_dec + 4;
	u32 st0[4], st1[4];
	int round;

	st0[0] = ctx->key_dec[0] ^ get_u32(in + 0);
	st0[1] = ctx->key_dec[1] ^ get_u32(in + 4);
	st0[2] = ctx->key_dec[2] ^ get_u32(in + 8);
	st0[3] = ctx->key_dec[3] ^ get_u32(in + 12);

	for (round = 0;; round += 2, rkp += 8)
	{
		st1[0] = inv_mix_columns(inv_subshift(st0, 0)) ^ rkp[0];
		st1[1] = inv_mix_columns(inv_subshift(st0, 1)) ^ rkp[1];
		st1[2] = inv_mix_columns(inv_subshift(st0, 2)) ^ rkp[2];
		st1[3] = inv_mix_columns(inv_subshift(st0, 3)) ^ rkp[3];

		if (round == ROUNDS_256 - 2)
			break;

		st0[0] = inv_mix_columns(inv_subshift(st1, 0)) ^ rkp[4];
		st0[1] = inv_mix_columns(inv_subshift(st1, 1)) ^ rkp[5];
		st0[2] = inv_mix_columns(inv_subshift(st1, 2)) ^ rkp[6];
		st0[3] = inv_mix_columns(inv_subshift(st1, 3)) ^ rkp[7];
	}

	put_u32(out + 0, inv_subshift(st1, 0) ^ rkp[4]);
	put_u32(out + 4, inv_subshift(st1, 1) ^ rkp[5]);
	put_u32(out + 8, inv_subshift(st1, 2) ^ rkp[6]);
	put_u32(out + 12, inv_subshift(st1, 3) ^ rkp[7]);
}



BOOL aes256(u8* out, CONST u8* in, u8* key, u32 mode)
{
	crypto_aes_ctx ctx;	

	aes_expandkey(&ctx, key);
	if (mode == MODE_AES::AES_CRYPT)
	{
		aes_encrypt(&ctx, out, in);
	}
	else if (mode == MODE_AES::AES_DECRYPT)
	{
		aes_decrypt(&ctx, out, in);
	}
	else
	{
		printf("Failed mode aes256. CRYPT or DECRYPT\n");
		memzero_explicit(&ctx, sizeof(ctx));
		return FALSE;
	}

	memzero_explicit(&ctx, sizeof(ctx));
	return TRUE;
}

u32 aes256_padding(u32 bytes)
{
	return (bytes / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
}

VOID aes_encrypt_blocks(crypto_aes_ctx* ctx, CONST u8* in, u8* out, u32 bytes, u32* size_padding, u32 mode)
{
	u32 end_bytes = bytes % AES_BLOCK_SIZE;
	u32 full_blocks_len = bytes - end_bytes;
	if (mode == MODE_AES::AES_CRYPT || mode == MODE_AES::AES_CRYPT_NO_PADDING)
	{
		for (u32 i = 0; i < full_blocks_len; i += AES_BLOCK_SIZE)
		{
			aes_encrypt(ctx, out + i, in + i);
		}

		if (mode == MODE_AES::AES_CRYPT_NO_PADDING)
			return;

		if (end_bytes != 0)
		{
			u8 last_block[AES_BLOCK_SIZE];
			u32 padding_len = AES_BLOCK_SIZE - end_bytes;
			*size_padding = padding_len;
			memcpy(last_block, in + full_blocks_len, end_bytes);

			for (size_t i = end_bytes; i < AES_BLOCK_SIZE; ++i)
			{
				last_block[i] = static_cast<u8>(padding_len);
			}
			aes_encrypt(ctx, out + full_blocks_len, last_block);
		}
		else
		{
			*size_padding = AES_BLOCK_SIZE;
			u8 padding_block[AES_BLOCK_SIZE];
			memset(padding_block, AES_BLOCK_SIZE, AES_BLOCK_SIZE);
			aes_encrypt(ctx, out + full_blocks_len, padding_block);
		}
	}
	else if (mode == MODE_AES::AES_DECRYPT || mode == MODE_AES::AES_DECRYPT_NO_PADDING)
	{
		for (u32 i = 0; i < full_blocks_len; i += AES_BLOCK_SIZE)
		{
			aes_decrypt(ctx, out + i, in + i);
		}

		if (mode == MODE_AES::AES_DECRYPT_NO_PADDING)
			return;

		BOOL padding_success = TRUE;
		u8 padding = out[bytes - 1];
		
		if (padding == 0 || padding > AES_BLOCK_SIZE)
		{
			printf("Failed padding\n");
			padding_success = FALSE;
			return;
		}
		
		for (int i = 0; i < padding; ++i)
		{
			if (out[bytes - 1 - i] != padding)
			{				
				padding_success = FALSE;
			}
			else
				out[bytes - 1 - i] = '\0';
		}

		if (padding_success)
			//*size_padding = bytes - padding;
			*size_padding = padding;
		else
		{
			*size_padding = 0;
			printf("Failed padding\n");
		}
	}
}
